name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure all files are fetched
           
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure all files are fetched

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Debug Repository Structure
        run: ls -R

      - name: Verify Dockerfile Exists
        run: |
         if [ ! -f "Dockerfile" ]; then
            echo "‚ùå ERROR: Dockerfile not found in the repository!"
            exit 1
         fi

      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME=siddamjayachandra/my-app
          TIMESTAMP=$(date +%Y%m%d%H%M%S)

          # Build the Docker image
          docker build -t $IMAGE_NAME:${{ github.sha }} -t $IMAGE_NAME:$TIMESTAMP -t $IMAGE_NAME:latest -f Dockerfile .

          # Push the images to Docker Hub
          docker push $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:$TIMESTAMP
          docker push $IMAGE_NAME:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Staging Server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.STAGING_SERVER_IP }}
          username: ${{ secrets.STAGING_SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            IMAGE_NAME=siddamjayachandra/my-app
            docker pull $IMAGE_NAME:latest
            
            # Stop and remove any existing container
            docker stop my-app || true
            docker rm my-app || true
            
            # Start a new container
            docker run -d -p 80:80 --name my-app $IMAGE_NAME:latest

